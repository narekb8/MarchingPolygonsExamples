// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Triangle
{
    float3 a, b, c, normA, normB, normC;
};

float _IsoLevel;
float _ChunkSizeX;
float _ChunkSizeY;
float _ChunkSizeZ;
RWTexture3D<float> _Weights;
AppendStructuredBuffer<Triangle> _Triangles;

static const int3 corner[8] = {
    int3(0, 0, 1),
    int3(1, 0, 1),
    int3(1, 0, 0),
    int3(0, 0, 0),
    int3(0, 1, 1),
    int3(1, 1, 1),
    int3(1, 1, 0),
    int3(0, 1, 0)
};

static const int tetrahedrons[6][4] = {
    { 0, 5, 1, 6 },
    { 0, 1, 2, 6 },
    { 0, 2, 3, 6 },
    { 0, 3, 7, 6 },
    { 0, 7, 4, 6 },
    { 0, 4, 5, 6 }
};

static const int tetrahedraEdgeVertexMapping[6][2] = {
    { 0, 1 },
    { 1, 2 },
    { 2, 0 },
    { 0, 3 },
    { 1, 3 },
    { 2, 3 }
};

static const int triTable[16][6] = {
    { -1, -1, -1, -1, -1, -1 },
    { 0, 3, 2, -1, -1, -1 },
    { 0, 1, 4, -1, -1, -1 },
    { 1, 4, 2, 2, 4, 3 },
    { 1, 2, 5, -1, -1, -1 },
    { 0, 3, 5, 0, 5, 1 },
    { 0, 2, 5, 0, 5, 4 },
    { 5, 4, 3, -1, -1, -1 },
    { 3, 4, 5, -1, -1, -1 },
    { 4, 5, 0, 5, 2, 0 },
    { 1, 5, 0, 5, 3, 0 },
    { 5, 2, 1, -1, -1, -1 },
    { 3, 4, 2, 2, 4, 1 },
    { 4, 1, 0, -1, -1, -1 },
    { 2, 3, 0, -1, -1, -1 },
    { -1, -1, -1, -1, -1, -1 }
};

float3 interp(int3 coordA, int3 coordB)
{
    float diff = (_IsoLevel - _Weights[coordA]) / (_Weights[coordB] - _Weights[coordA]);
    float3 pos = (float3)coordA + diff * ((float3)coordB - (float3)coordA);

    return pos;
}

float3 calcCoordNormal(int3 coord)
{
    int3 offsetX = int3(1, 0, 0);
    int3 offsetY = int3(0, 1, 0);
    int3 offsetZ = int3(0, 0, 1);

    if(coord.x == 0 && coord.y == 0 && coord.z == 0)
    {
        float densityX = _Weights[coord + offsetX] - _Weights[coord];
        float densityY = _Weights[coord + offsetY] - _Weights[coord];
        float densityZ = _Weights[coord + offsetZ] - _Weights[coord];

        return normalize(float3(densityX, densityY, densityZ));
    }
    else
    {
        float densityX = _Weights[coord + offsetX] - _Weights[coord - offsetX];
        float densityY = _Weights[coord + offsetY] - _Weights[coord - offsetY];
        float densityZ = _Weights[coord + offsetZ] - _Weights[coord - offsetZ];

        return normalize(float3(densityX, densityY, densityZ));
    }
}

float3 calcVertexNormal(int3 coordA, int3 coordB)
{
    float3 normalA = calcCoordNormal(coordA);
    float3 normalB = calcCoordNormal(coordB);
    
    float diff = (_IsoLevel - _Weights[coordA]) / (_Weights[coordB] - _Weights[coordA]);
    return normalA + diff * (normalB - normalA);
}

void polygoniseTri(int3 id, int iter, int v0, int v1, int v2, int v3)
{
    float cornerSample[8];
    for (int i = 0; i < 8; i++)
    {
        cornerSample[i] = _Weights[id + corner[i]];
    }

    int cube_index = 0;
        
    if (cornerSample[v0] > _IsoLevel) cube_index |= 1;
    if (cornerSample[v1] > _IsoLevel) cube_index |= 2;
    if (cornerSample[v2] > _IsoLevel) cube_index |= 4;
    if (cornerSample[v3] > _IsoLevel) cube_index |= 8;

    for (int k = 0; triTable[cube_index][k] != -1 && k < 6; k += 3)
    {
        int edges[3] = { triTable[cube_index][k],
        triTable[cube_index][k + 1],
        triTable[cube_index][k + 2] };
        float3 vertices[3];
        float3 normals[3];

        for (int l = 0; l < 3; ++l)
        {
            int edgeA = tetrahedraEdgeVertexMapping[edges[l]][0];
            int edgeB = tetrahedraEdgeVertexMapping[edges[l]][1];

            int edgeAIndex = tetrahedrons[iter][edgeA];
            int edgeBIndex = tetrahedrons[iter][edgeB];

            float3 vertex_a = id + corner[edgeAIndex];
            float3 vertex_b = id + corner[edgeBIndex];

            vertices[l] = interp(vertex_a, vertex_b);
            normals[l] = calcVertexNormal(vertex_a, vertex_b);
        }

        Triangle _Tri;
        _Tri.a = vertices[0];
        _Tri.b = vertices[1];
        _Tri.c = vertices[2];

        _Tri.normA = normals[0];
        _Tri.normB = normals[1];
        _Tri.normC = normals[2];

        //_Tri.normC = normalize(cross(_Tri.c - _Tri.a, _Tri.b - _Tri.a));
        //_Tri.normB = normalize(cross(_Tri.a - _Tri.b, _Tri.c - _Tri.b));
        //_Tri.normA = normalize(cross(_Tri.b - _Tri.c, _Tri.a - _Tri.c));

        _Triangles.Append(_Tri);
    }
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _ChunkSizeX - 1 || id.y >= _ChunkSizeY - 1 || id.z >= _ChunkSizeZ - 1)
    {
        return;
    }

    polygoniseTri(id, 0, tetrahedrons[0][0], tetrahedrons[0][1], tetrahedrons[0][2], tetrahedrons[0][3]);
    polygoniseTri(id, 1, tetrahedrons[1][0], tetrahedrons[1][1], tetrahedrons[1][2], tetrahedrons[1][3]);
    polygoniseTri(id, 2, tetrahedrons[2][0], tetrahedrons[2][1], tetrahedrons[2][2], tetrahedrons[2][3]);
    polygoniseTri(id, 3, tetrahedrons[3][0], tetrahedrons[3][1], tetrahedrons[3][2], tetrahedrons[3][3]);
    polygoniseTri(id, 4, tetrahedrons[4][0], tetrahedrons[4][1], tetrahedrons[4][2], tetrahedrons[4][3]);
    polygoniseTri(id, 5, tetrahedrons[5][0], tetrahedrons[5][1], tetrahedrons[5][2], tetrahedrons[5][3]);
}